[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gaming Reduction Experiment",
    "section": "",
    "text": "This site describes the data simulation, preprocessing, and analysis code for our RCT on gaming effects.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "scripts/sim_self_report.html",
    "href": "scripts/sim_self_report.html",
    "title": "2  Generate Synthetic Data",
    "section": "",
    "text": "2.1 Introduction\nThis document demonstrates a complete workflow for generating synthetic data, introducing dropout, and fitting models (a GAM or MLM) to the data. The main focus is on the sim_study function, which orchestrates the data simulation, dropout process, and model fitting.\nAs an overview, we compare the following possible models for estimating the effect of gaming reduction, for both H3a (the intention-to-treat effect) and H3b (the per-protocol effect; i.e., the effect of actual gaming reduction relative to one’s own baseline). The models we compare are:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generate Synthetic Data</span>"
    ]
  },
  {
    "objectID": "scripts/sim_self_report.html#introduction",
    "href": "scripts/sim_self_report.html#introduction",
    "title": "2  Generate Synthetic Data",
    "section": "",
    "text": "ITT = Intention-to-treat; PP = per-protocol\n\n\n\n\n\n\n\n\nModel Name\nSyntax\nTarget Effect\nNotes\n\n\n\n\nGAM\ngam(wellbeing ~ condition:intervention_period + age + gender + s(id, bs = \"re\") + s(day, by = condition, bs = \"tp\"), correlation = corAR1(form = ~ day | id))\nITT\n\n\n\nGAM with no main effect)\ngam(wellbeing ~         age + gender +         s(id, bs = \"re\") +         s(day, by = condition, bs = \"tp\"),       data = dat,       correlation = corCAR1(form = ~ day | id))\nITT\nHere we do not estimate a parameter for the effect of the intervention directly; rather, we simply fit separate curves to each condition and calculate the average marginal effect using {emmeans}\n\n\nMLM\nlme(     fixed = wellbeing ~ condition*intervention_period + age + gender,     random = ~ 1|id,     correlation = corCAR1(form = ~ day | id),     method = \"ML\"   )\nITT\nMultiple versions of this model failed when including random slopes; we therefore dropped these\n\n\nMLM Simple\nlme(     fixed = wellbeing ~ baseline + condition + age + gender,     random = ~ 1 + condition|id,     correlation = corCAR1(form = ~ day | id),     method = \"ML\",   )\nITT\nHere we do not model the baseline (pre-intervention period) itself—we model only the 14-day period when the intervention is active, using average wellbeing during baseline as a covariate\n\n\nGLS (generalized least squares)\ngls(     wellbeing ~ condition * intervention_period + age + gender,     correlation = corCAR1(form = ~ day | id),   )\nITT\n\n\n\nGLS Simple\ngls(     wellbeing ~ condition + baseline + age + gender,     correlation = corAR1(form = ~ day | id),   )\nITT\n\n\n\nGLS Splines\ngls(     wellbeing ~ ns(day, df = 4) * intervention_period * condition,,     correlation = corCAR1(form = ~ day | id),     data = dat   )\nITT\nIn this version, we fit a GLS but allow non-linearity in the trajectory of wellbeing using splines\n\n\nMLM Reduction\nlme(     fixed = wellbeing ~ intervention_active*reduction + age + gender,     random = ~ 1 + intervention_active*reduction | id,     correlation = corCAR1(form = ~ day | id)   )\nPP\nHere we test our intended model for the per-protocol effect; reduction is the number of hours played relative to that person’s mean playtime at baseline\n\n\n\n\n2.1.1 Take-aways\nOur simulations show that several models perform well at parameter recovery for the ITT effect, but that the GAM model has the highest power for small effects—the type of effects we believe we are most likely to observed—and for non-linear trajectories over the 14 day period (e.g., an effect that slowly accumulates over a couple of days and then plateaus, or a temporary withdrawal followed by a later improvement). The GAM has approximately 50% power for a standardized effect of .2, and 80% power for a standardized effect of .3, but this varies based the shape of that effect over time.\nThe MLM Reduction model performs very well, and has &gt;95% power for standardized effects of approximately .2 or greater.\n\n\n2.1.2 Load Libraries\nFirst we load packages with pacman, which is fully compatible with renv.\n\n\nShow code (load libraries)\nlibrary(pacman)\n\np_load(tidyverse, qualtRics, lme4, mgcv, marginaleffects, broom, forestplot, broom.mixed, nlme, rms, emmeans, splines, furrr, extraDistr)\n\nplan(multisession, workers = parallel::detectCores()-1)\n\ntheme_set(theme_minimal())\ntheme_update(\n  strip.background = element_rect(fill = \"black\"),\n  strip.text = element_text(color = \"white\", size = 10),\n  panel.grid.minor = element_blank(),\n  panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 1),\n)\n\noptions(scipen = 999)\n\n\n\n\n2.1.3 Simulation, Dropout, and Fitting Functions\nHere we define:\n\nsim_data: Generates synthetic data with random intercepts/slopes and AR(1) errors.\nsim_dropout: Introduces missingness and dropout in the dataset.\nfit_*: Fits a statistical model to the simulated data (see table above)\nsim_study: Ties everything together—generates data, applies dropout, then fits the chosen model and returns a tidy summary.\n\n\n\nShow code (sim functions)\n#' Generate Synthetic Data\n#'\n#' This function simulates synthetic panel data for `n` participants over `n_days` time points,\n#' with an intervention effect, random intercepts and slopes, and AR(1)-correlated residuals.\n#'\n#' @param n Number of participants. Default is 100.\n#' @param n_days Number of time points per participant.\n#' @param b Fixed effect of condition (if mediated == FALSE) or a 1-hour reduction in playtime.\n#' @param phi AR(1) autocorrelation coefficient.\n#' @param sigma AR(1) residual standard deviation.\nsim_data &lt;- function(n = 100,\n                     n_days = 28,\n                     \n                     # effect parameters\n                     b = 3.7, # effect in unstandardized units\n                     mu = 78.5, # grand mean of the outcome\n                     \n                     \n                     # random effects parameters\n                     tau_int = 9.7,   # Random intercept SD (between-person variance)\n                     tau_slope = .05,  # Random slope SD \n                     within_person_sd = 11.8, # Within-person SD\n                     \n                     # AR(1) parameters\n                     phi = 0.8,     # Autocorrelation coefficient\n                     effect_shape = \"grow\",\n                     k = .5, # affects how quickly the plateau effect plateaus\n                     \n                     mediated = FALSE,\n                     \n                     # playtime parameters\n                     playtime_grand_mean = 1,   # Average baseline playtime in hours\n                     playtime_grand_sd = .5,   # SD for baseline playtime in log units (log-normal distribution)\n                     daily_play_sd = 0.5      # Daily noise in playtime\n                     # compliance_mean = 0.7,    # Average reduction (in hours) for intervention group during intervention period\n)     \n{\n  dat &lt;- tibble(\n    id = 1:n,\n    age = sample(18:36, n, replace = TRUE),\n    gender = sample(c(\"man\",\"woman\",\"non-binary\"), n, prob = c(.45, .45, .1), replace = TRUE),\n    condition = factor(sample(c(\"control\", \"intervention\"), n, replace = TRUE)),\n    experimental_condition = ifelse(condition == \"intervention\", 1, 0),\n    intercept_wb = rnorm(n, 0, tau_int),\n    slope_wb = rnorm(n, 0, tau_slope),\n    intercept_play = rlnorm(n, log(playtime_grand_mean), playtime_grand_sd),\n  ) |&gt; \n    # expand to 28 waves per id\n    crossing(\n      day = 1:n_days\n    ) |&gt; \n    mutate(\n      intervention_period = as.numeric(day &gt; 7 & day &lt; 22),\n      intervention_active = intervention_period & condition == \"intervention\",\n      compliance = ifelse(intervention_active, rkumar(n*n_days, a = .05, b = .1), 0),\n      \n      # In the baseline period, play is just the subject’s baseline plus some day-to-day noise\n      # During the intervention, experimental subjects reduce play by their compliance amount\n      playtime = (1 - compliance) * rlnorm(n, log(intercept_play), daily_play_sd),\n      effect_time = case_when(\n        effect_shape == \"plateau\" ~ if_else(intervention_period == 1, (b + slope_wb) * (1-exp(-k * (day - 7))), 0),\n        effect_shape == \"grow\" ~ if_else(intervention_period == 1, (day - 7) * ((b + slope_wb)/7), 0),\n        TRUE ~ NA_real_\n      ),\n    ) |&gt; \n    group_by(id) |&gt; \n    mutate(\n      \n      baseline_playtime = mean(playtime[day &lt;= 7]),\n      reduction = baseline_playtime - playtime, # The mediator: reduction in play relative to the baseline average\n      sigma = within_person_sd * sqrt(1-phi^2),\n      # Generate AR(1) errors for each participant\n      e = as.numeric(arima.sim(n = n_days, \n                               model = list(ar = phi), \n                               sd = sigma)),\n      # Add random effect + fixed effect + AR(1) error\n      wellbeing = case_when(\n        mediated == TRUE ~ mu + \n                            intercept_wb + \n                            effect_time * reduction + \n                            .01*(age-18) +\n                            -.05*gender %in% c(\"women\",\"non-binary\") +\n                            e,\n        mediated == FALSE ~ mu + \n                            intercept_wb + \n                            effect_time * experimental_condition * intervention_period + \n                            .01*(age-18) +\n                            -.05*gender %in% c(\"women\",\"non-binary\") +\n                            e\n      )\n    ) |&gt; \n    ungroup() |&gt; \n    mutate(across(where(is.numeric), ~ round(., 3)))\n  \n  dat\n\n}\n\n\n#' Simulate Dropout\n#'\n#' Introduces missingness and dropout into a dataset by randomly assigning records as missing\n#' or dropped out. Once a participant is dropped out, all subsequent records become missing.\n#'\n#' @param dat A tibble generated by \\code{sim_data()}.\n#'\n#' @return A tibble of the same structure as \\code{dat}, but with some \\code{wellbeing} values set to NA.\n#'\nsim_dropout &lt;- function(dat) {\n  \n  dropout &lt;- dat |&gt; \n    mutate(\n      missing = sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(.10, .90)),\n      dropout = sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(.01, .99))\n    ) |&gt;\n    mutate(\n      missing = ifelse(cumsum(dropout) &gt; 0, TRUE, missing),\n      .by = id\n    ) |&gt;\n    arrange(as.integer(id), day) |&gt; \n    mutate(wellbeing = ifelse(missing, NA, wellbeing))\n  dropout\n}\n\n#' Fit a Generalized Additive Model (GAM)\n#'\n#' Fits a GAM model to the provided dataset using \\code{mgcv::gam}, including an AR(1)\n#' correlation structure and random intercept for each ID.\n#'\n#' @param dat A tibble of repeated-measures data (e.g., from \\code{sim_data()} and \\code{sim_dropout()}).\n#'\n#' @return An object of class \\code{gam}, which is the fitted GAM model.\n#'\nfit_gam &lt;- function(dat) {\n  \n  gam(wellbeing ~ \n        condition:intervention_period + age + gender +\n        s(id, bs = \"re\") + \n        s(day, by = condition, bs = \"tp\"), \n      data = dat,\n      correlation = corAR1(form = ~ day | id))\n}\n\nfit_gam_no_main &lt;- function(dat) {\n  \n  gam(wellbeing ~ \n        age + gender +\n        s(id, bs = \"re\") + \n        s(day, by = condition, bs = \"tp\"), \n      data = dat,\n      correlation = corCAR1(form = ~ day | id))\n}\n\n#' Fit a Multi-Level Model (MLM)\n#'\n#' Fits a linear mixed-effects model (LME) with random intercept for each ID using \\code{lme4::lmer}.\n#'\n#' @param dat A tibble of repeated-measures data (e.g., from \\code{sim_data()} and \\code{sim_dropout()}).\n#'\n#' @return An object of class \\code{lmerMod}, which is the fitted MLM model.\n#'\nfit_mlm &lt;- function(dat) {\n  # lmer(wellbeing ~ condition*intervention_period + age + gender + (1|id), data = dat)\n  lme(\n    fixed = wellbeing ~ condition*intervention_period + age + gender,\n    random = ~ 1|id,  # or use a more flexible structure if needed\n    correlation = corCAR1(form = ~ day | id),\n    method = \"ML\",\n    data = dat |&gt; filter(!is.na(wellbeing))\n  )\n}\n\nfit_mlm_simple &lt;- function(dat) {\n  \n  tmp &lt;- dat |&gt; \n    group_by(id) |&gt; \n    # take the mean of days 1-7 \n    mutate(baseline = mean(wellbeing[day &lt; 8], na.rm = TRUE)) |&gt; \n    filter(intervention_period == 1) |&gt; \n    filter(!is.na(wellbeing))\n  \n  lme(\n    fixed = wellbeing ~ baseline + condition + age + gender,\n    random = ~ 1 + condition|id,\n    correlation = corCAR1(form = ~ day | id),\n    method = \"ML\",\n    data = tmp |&gt; filter(!is.na(wellbeing))\n  )\n}\n\nfit_gls &lt;- function(dat) {\n  \n  gls(\n    wellbeing ~ condition * intervention_period + age + gender, \n    correlation = corCAR1(form = ~ day | id),\n    data = dat |&gt; filter(!is.na(wellbeing))\n  )\n}\n\nfit_gls_simple &lt;- function(dat) {\n  \n  tmp &lt;- dat |&gt; \n    group_by(id) |&gt; \n    # take the mean of days 1-7 \n    mutate(baseline = mean(wellbeing[day &lt; 8], na.rm = TRUE)) |&gt; \n    filter(intervention_period == 1) |&gt; \n    filter(!is.na(wellbeing))\n  \n  gls(\n    wellbeing ~ condition + baseline + age + gender, \n    correlation = corAR1(form = ~ day | id),\n    data = tmp\n  )\n}\n\nfit_gls_spline &lt;- function(dat) {\n  gls(\n    wellbeing ~ ns(day, df = 4) * intervention_period * condition,,  \n    correlation = corCAR1(form = ~ day | id),\n    data = dat\n  )\n}\n\nfit_mlm_reduction &lt;- function(dat) {\n  lme(\n    fixed = wellbeing ~ intervention_active*reduction + age + gender, \n    random = ~ 1 + intervention_active*reduction | id,\n    correlation = corCAR1(form = ~ day | id),\n    data = dat\n  )\n}\n\n# Helper function to extract the focal effect for GLS models\nextract_marginal_effect &lt;- function(mod, dat, focal_term = \"conditionintervention\") {\n  # Here we assume your GLS model is specified with condition*intervention_period\n  # and you want the effect of condition (e.g., intervention vs. control) during intervention.\n  # We create a reference grid that fixes intervention_period at 1.\n  rg &lt;- ref_grid(mod, data = dat, at = list(intervention_period = 1))\n  \n  # Obtain estimated marginal means for each condition.\n  emm &lt;- emmeans(rg, ~ condition)\n  \n  # Compute the pairwise contrast (e.g., intervention - control)\n  # Adjust names as needed. The contrast below returns a one-row summary.\n  contr &lt;- emmeans::contrast(emm, method = list(\"intervention - control\" = c(-1, 1)), adjust = \"none\")\n  contr_sum &lt;- summary(contr, infer = TRUE)\n  \n  # Construct a one-row data frame with consistent column names.\n  # If you have more than one contrast, you might need to filter for the one of interest.\n  df &lt;- data.frame(\n    term = focal_term,\n    estimate = contr_sum$estimate,\n    std.error = contr_sum$SE,\n    conf.low = contr_sum$lower.CL,\n    conf.high = contr_sum$upper.CL,\n    row.names = NULL\n  )\n  \n  return(df)\n}\n\n#' Simulation Study Orchestrator\n#'\n#' A higher-level function that ties together data simulation, dropout, and model fitting,\n#' returning a tidy summary of the fitted model parameters.\n#'\n#' @param model_function A function to fit the model. Defaults to \\code{fit_gam}.\n#' @param n Number of participants passed to \\code{sim_data()}. Default is 1000.\n#' @param n_days Number of time points per participant passed to \\code{sim_data()}. Default is 28.\n#' @param b Fixed effect for the intervention slope passed to \\code{sim_data()}. Default is 0.01.\n#' @param phi AR(1) autocorrelation coefficient passed to \\code{sim_data()}. Default is 0.7.\n#' @param sigma AR(1) residual standard deviation passed to \\code{sim_data()}. Default is 0.6.\n#'\n#' @return A data frame (tibble) of model estimates from \\code{broom::tidy(parametric = TRUE)}.\n#'\n\n# Updated simulation orchestrator that handles GLS models separately.\nsim_study &lt;- function(model = \"fit_gam\", focal_term = \"intervention_activeTRUE:reduction\", ...) {\n  args &lt;- list(...)\n  dat &lt;- do.call(sim_data, args)\n  model_function &lt;- get(model)\n  \n  mod &lt;- model_function(dat)\n  \n  if (model %in% c(\"fit_gam_no_main\",\"fit_gls_spline\")) {\n    # Extract the effect using our helper function.\n    result &lt;- suppressMessages(extract_marginal_effect(mod, \n                                                       dat, \n                                                       focal_term = focal_term))\n  } else {\n    # For models that work with broom, extract the focal parameter.\n    # Adjust the filtering term as needed.\n    result &lt;- broom::tidy(mod, parametric = TRUE) %&gt;%\n      filter(term == focal_term) |&gt; \n      # filter(\n      #   term == \"conditionintervention:intervention_period\" | \n      #     (model %in% c(\"fit_mlm_simple\",\"fit_gls_simple\") & term == \"conditionintervention\")\n      # ) |&gt; \n      mutate(\n        conf.low = estimate - 1.96 * std.error,\n        conf.high = estimate + 1.96 * std.error\n      )\n  }\n  result\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generate Synthetic Data</span>"
    ]
  },
  {
    "objectID": "scripts/sim_self_report.html#test-and-plot-one-simulated-study",
    "href": "scripts/sim_self_report.html#test-and-plot-one-simulated-study",
    "title": "2  Generate Synthetic Data",
    "section": "2.2 Test and Plot One Simulated Study",
    "text": "2.2 Test and Plot One Simulated Study\nBelow, we create a sample dataset using sim_data() and examine it with a line plots by day. We can also see whether the simulated SDs for wellbeing align with the target values in the simulation—luckily, they do.\n\n\nShow code (descriptive plotting)\ndat &lt;- sim_data(effect_shape = \"plateau\", mediated = TRUE)\n\nsds &lt;- dat |&gt; \n  group_by(id) |&gt; \n  summarise(mean_value = mean(wellbeing, na.rm = TRUE),\n            sd_within  = sd(wellbeing, na.rm = TRUE)) |&gt;\n  summarise(between_sd   = sd(mean_value, na.rm = TRUE),\n            avg_within_sd = mean(sd_within, na.rm = TRUE))\n\n# plot wellbeing by group\ndat |&gt; \n  group_by(condition, day) |&gt; \n  summarise(wellbeing = mean(wellbeing)) |&gt; \n  ggplot(aes(y = wellbeing, x = day, color = condition)) +\n  geom_line() + \n  theme_minimal() +\n  scale_y_continuous(limits = c(60, 100))\n\n\n\n\n\n\n\n\n\n\n2.2.1 Test Fit (H3a - intention to treat)\nWe fit various models to the newly simulated data to make sure each appears to be working properly, and also test the full sim_study pipeline.\n\n\nShow code (test fit h3a)\ndat &lt;- sim_data(mediated = FALSE)\n\nfit_mlm(dat) |&gt; summary()\nfit_mlm_simple(dat) |&gt; summary()\nfit_gls(dat) |&gt; summary()\nfit_gls_simple(dat) |&gt; summary()\nfit_gls_spline(dat) |&gt; extract_marginal_effect()\nfit_gam(dat) |&gt; summary()\nfit_gam_no_main(dat) |&gt; extract_marginal_effect()\n\nsim_study(model = \"fit_gam_no_main\")\nsim_study(model = \"fit_gls_spline\")\n\n\nSince some models (e.g., fit_gam_no_main) do not have a parameter that represents the average difference-in-difference between groups during the intervention period, we need to calculate this ourselves by marginalize across the 14-day intervention period.\n\n\nShow code (test emmeans)\nemm_day &lt;- emmeans(\n  fit_gls_spline(dat), \n  pairwise ~ condition | day, \n  at = list(day = 8:21), \n  condition = c(\"control\", \"intervention\"), \n  data = dat |&gt; mutate(condition = factor(condition, levels = c(\"intervention\", \"control\")))\n)\n\nsummary(emm_day$contrasts, infer = TRUE, level = .95, by = NULL, adjust = \"none\")\n\n# and then integrated over the 14 day intervention period\nrg &lt;- ref_grid(fit_gls_spline(dat),\n               at = list(intervention_period = 1),\n               cov.reduce = list(day = mean),\n               data = dat |&gt; mutate(condition = factor(condition, levels = c(\"control\",\"intervention\"))))\n\nemm &lt;- emmeans(rg, ~ condition)\n(contrast_result &lt;- contrast(emm, method = list(\"intervention - control\" = c(-1, 1)), adjust = \"none\"))\n\n\nmeans &lt;- summary(emm)$emmean\nnames(means) &lt;- summary(emm)$condition\n(diff_manual &lt;- means[\"intervention\"] - means[\"control\"])\n\n\n\n\n2.2.2 Test Fit (H3b - per-protocol)\nAnother quick test of our fit_mlm_reduction model, to make sure the alternative simulation whereby the effect of the intervention is mediated by a reduction in playtime is also functioning properly.\n\n\nShow code (test fit h3b)\ndat &lt;- sim_data(mediated = TRUE)\n\nfit_mlm_reduction(dat) |&gt; summary()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generate Synthetic Data</span>"
    ]
  },
  {
    "objectID": "scripts/sim_self_report.html#simulated-h3a-power-analysis",
    "href": "scripts/sim_self_report.html#simulated-h3a-power-analysis",
    "title": "2  Generate Synthetic Data",
    "section": "2.3 Simulated H3a power analysis",
    "text": "2.3 Simulated H3a power analysis\nTo assess power/sensitivity, we run multiple simulations (controlled by n_sims) and gather the parameter estimates for a particular term (e.g., conditionintervention:intervention_periodTRUE, or for our marginalized effect conditionintervention). Each iteration calls sim_study, which does the data generation, dropout, and fitting.\nAs this is quite slow, we both use parallel processing with furrr cache the results.\n\n\nShow code (simulate power h3a)\nn_sims &lt;- 500\n\nspecs_h3a &lt;- expand_grid(\n  model = c(\"fit_gam\", \"fit_gam_no_main\", \"fit_mlm\", \"fit_mlm_simple\", \"fit_gls\", \"fit_gls_simple\", \"fit_gls_spline\"),  # model names as strings\n  b = c(1.2, 2.4, 3.6, 4.8, 6),\n  effect_shape = c(\"grow\", \"plateau\")\n) |&gt; \n  mutate(\n    focal_term = case_when(\n      model %in% c(\"fit_mlm_simple\",\"fit_gls_simple\", \"fit_gam_no_main\") ~ \"conditionintervention\",\n      model %in% c(\"fit_gam\", \"fit_mlm\", \"fit_gls\", \"fit_gls_spline\") ~ \"conditionintervention:intervention_period\",\n      TRUE ~ \"conditionintervention:intervention_period\"\n    )\n  ) |&gt; \n  (\\(d) { d$row_id &lt;- pmap_chr(d, ~ paste0(names(list(...)), \"=\", c(...), collapse = \"_\")); d })() |&gt; \n  mutate(i = row_number())\n\nresults_h3a &lt;- specs_h3a |&gt; \n  rowwise() |&gt; \n  mutate(sim_results = list({\n    message(\"Processing spec row: \", i)\n    future_map_dfr(1:n_sims, function(sim) {\n      library(tidyverse)\n      library(lme4)\n      library(mgcv)\n      library(broom)\n      library(nlme)\n      library(emmeans)\n      library(splines)\n      library(broom.mixed)\n      library(extraDistr)\n\n      tryCatch({\n        sim_study(\n          model = model,  # retrieve the function from its name\n          focal_term = focal_term,\n          n = 100,\n          n_days = 28,\n          # effect parameters\n          b = b, # effect in unstandardized units\n          mu = 78.5, # grand mean of the outcome\n          effect_shape = effect_shape,\n          k = .5,\n          # random effects parameters\n          tau_int = 9.7,   # Random intercept SD (between-person variance)\n          tau_slope = .8,  # Random slope SD \n          within_person_sd = 11.8, # Within-person SD\n          # AR(1) parameters\n          phi = 0.7     # Autocorrelation coefficient\n        ) |&gt; \n          mutate(sim = sim)\n      }, error = function(e) {\n        message(\"Simulation \", sim, \" failed: \", e$message)\n        tibble(\n          term = NA_character_,\n          estimate = NA_real_,\n          std.error = NA_real_,\n          conf.low = NA_real_,\n          conf.high = NA_real_,\n          sim = sim\n        )\n      })\n    }, \n    .progress = TRUE,\n    .options = furrr_options(globals = c(\"specs\",\"sim_study\", \"sim_data\", \n                                         \"fit_gam\", \"fit_gam_no_main\",\n                                         \"fit_mlm\", \"fit_mlm_simple\",\n                                         \"fit_gls\", \"fit_gls_simple\",\n                                         \"fit_gls_spline\", \n                                         \"extract_marginal_effect\"),\n                             seed = TRUE)\n    )\n  })) |&gt; \n  ungroup() |&gt; \n  unnest(sim_results)\n\nsim_summary_h3a &lt;- results_h3a |&gt; \n  group_by(row_id) |&gt; \n  summarise(\n    model = first(model),\n    b = first(b),\n    effect_shape = first(effect_shape),\n    mean_effect = mean(estimate, na.rm = TRUE),\n    mean_se = mean(std.error, na.rm = TRUE),\n    mean_conf.low = mean(conf.low, na.rm = TRUE),\n    mean_conf.high = mean(conf.high, na.rm = TRUE),\n    power = sum(conf.low &gt; 0, na.rm = TRUE) / sum(!is.na(conf.low))\n  )\n\n\n\n\nShow code (visualize power h3a)\n# Estimated effect vs. true effect (b)\nggplot(sim_summary_h3a, aes(x = b, y = mean_effect, color = model)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = mean_conf.low, ymax = mean_conf.high), width = 0.1) +\n  facet_wrap(~ effect_shape) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(x = \"True Effect (unstandardized b)\", y = \"Estimated Effect\",\n       title = \"Estimated vs. True Effects by Model and Effect Shape\") +\n  scale_x_continuous(breaks = c(1.2, 2.4, 3.6, 4.8, 6),\n                     sec.axis = sec_axis(~ . / 12, name = \"Standardized Effect (b/12)\"))\n\n\n\n\n\n\n\n\n\nShow code (visualize power h3a)\n# Power vs. true effect (b)\nggplot(sim_summary_h3a, aes(x = b, y = power, color = model)) +\n  geom_line(size = 1) +\n  geom_point(size = 3) +\n  facet_wrap(~ effect_shape) +\n  labs(x = \"True Effect (unstandardized b)\", y = \"Power\",\n       title = \"Power by Model and Effect Shape\") +\n  scale_x_continuous(breaks = c(1.2, 2.4, 3.6, 4.8, 6),\n                     sec.axis = sec_axis(~ . / 12, name = \"Standardized Effect (b/12)\")) +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1), breaks = seq(0, 1, .1))\n\n\n\n\n\n\n\n\n\nShow code (visualize power h3a)\n# results |&gt;\n#   forestplot(mean = estimate,\n#              lower = conf.low,\n#              upper = conf.high,\n#              labeltext = term)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generate Synthetic Data</span>"
    ]
  },
  {
    "objectID": "scripts/sim_self_report.html#simulated-h3b-power-analysis",
    "href": "scripts/sim_self_report.html#simulated-h3b-power-analysis",
    "title": "2  Generate Synthetic Data",
    "section": "2.4 Simulated H3b power analysis",
    "text": "2.4 Simulated H3b power analysis\nSame thing as above, but now looking at power for our per-protocol model.\n\n\nShow code (sim study h3b)\nn_sims &lt;- 500\n\nspecs_h3b &lt;- expand_grid(\n  model = c(\"fit_mlm_reduction\"),  # model names as strings\n  b = c(1.2, 2.4, 3.6, 4.8),\n  effect_shape = c(\"grow\", \"plateau\")\n) |&gt; \n  # calculate the mean of the Kumaraswamy distribution - the expected effect size of the mediated version is b * average compliance\n  mutate(\n    focal_term = case_when(\n      model == \"fit_mlm_reduction\" ~ \"intervention_activeTRUE:reduction\"\n    ),\n    expected_effect = b * .1*beta(1 + 1/.05, .1),\n  ) |&gt; \n  (\\(d) { d$row_id &lt;- pmap_chr(d, ~ paste0(names(list(...)), \"=\", c(...), collapse = \"_\")); d })() |&gt; \n  mutate(i = row_number())\n\nresults_h3b &lt;- specs_h3b |&gt; \n  rowwise() |&gt; \n  mutate(sim_results = list({\n    message(\"Processing spec row: \", i)\n    future_map_dfr(1:n_sims, function(sim) {\n      library(tidyverse)\n      library(nlme)\n      library(broom.mixed)\n      library(extraDistr)\n      library(rms)\n\n      tryCatch({\n        sim_study(\n          model = model,  # retrieve the function from its name\n          focal_term = focal_term,\n          n = 100,\n          n_days = 28,\n          # effect parameters\n          b = b, # effect in unstandardized units\n          mu = 78.5, # grand mean of the outcome\n          effect_shape = effect_shape,\n          k = .5,\n          # random effects parameters\n          tau_int = 9.7,   # Random intercept SD (between-person variance)\n          tau_slope = .8,  # Random slope SD \n          within_person_sd = 11.8, # Within-person SD\n          # AR(1) parameters\n          phi = 0.7,     # Autocorrelation coefficient\n          mediated = TRUE\n        ) |&gt; \n          mutate(sim = sim)\n      }, error = function(e) {\n        message(\"Simulation \", sim, \" failed: \", e$message)\n        tibble(\n          term = NA_character_,\n          estimate = NA_real_,\n          std.error = NA_real_,\n          conf.low = NA_real_,\n          conf.high = NA_real_,\n          sim = sim\n        )\n      })\n    }, \n    .progress = TRUE,\n    .options = furrr_options(globals = c(\"specs\",\"sim_study\", \"sim_data\", \n                                         \"fit_mlm_reduction\"),\n                             seed = TRUE)\n    )\n  })) |&gt; \n  ungroup() |&gt; \n  unnest(sim_results)\n\nsim_summary_h3b &lt;- results_h3b |&gt; \n  group_by(row_id) |&gt; \n  summarise(\n    model = first(model),\n    b = first(b),\n    expected_effect = first(expected_effect),\n    effect_shape = first(effect_shape),\n    mean_effect = mean(estimate, na.rm = TRUE),\n    mean_se = mean(std.error, na.rm = TRUE),\n    mean_conf.low = mean(conf.low, na.rm = TRUE),\n    mean_conf.high = mean(conf.high, na.rm = TRUE),\n    power = sum(conf.low &gt; 0, na.rm = TRUE) / sum(!is.na(conf.low))\n  )\n\n\n\n\nShow code (visualize power h3b)\n# Estimated effect vs. true effect (b)\nggplot(sim_summary_h3b, aes(x = expected_effect, y = mean_effect, color = model)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = mean_conf.low, ymax = mean_conf.high), width = 0.1) +\n  facet_wrap(~ effect_shape) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(x = \"True Effect (unstandardized b)\", y = \"Estimated Effect\",\n       title = \"Estimated vs. True Effects by Model and Effect Shape\") +\n  scale_x_continuous(breaks = c(1.2, 2.4, 3.6, 4.8, 6),\n                     sec.axis = sec_axis(~ . / 12, name = \"Standardized Effect (b/12)\"))\n\n\n\n\n\n\n\n\n\nShow code (visualize power h3b)\n# Power vs. true effect (b)\nggplot(sim_summary_h3b, aes(x = expected_effect, y = power, color = model)) +\n  geom_line(size = 1) +\n  geom_point(size = 3) +\n  facet_wrap(~ effect_shape) +\n  labs(x = \"True Effect (unstandardized b)\", y = \"Power\",\n       title = \"Power by Model and Effect Shape\") +\n  scale_x_continuous(breaks = c(1.2, 2.4, 3.6, 4.8, 6),\n                     sec.axis = sec_axis(~ . / 12, name = \"Standardized Effect (b/12)\")) +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1), breaks = seq(0, 1, .1))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generate Synthetic Data</span>"
    ]
  },
  {
    "objectID": "scripts/sim_self_report.html#planned-sensitivity-analyses",
    "href": "scripts/sim_self_report.html#planned-sensitivity-analyses",
    "title": "2  Generate Synthetic Data",
    "section": "2.5 Planned Sensitivity Analyses",
    "text": "2.5 Planned Sensitivity Analyses\nWe have preregistered several sensitivity analyses to test the robustness of any effects we find. These include:\n\nDay 21 only: We will estimate the effect of the intervention on day 21 only, to see what the difference between groups is at the end of the intervention period\nMarginal means: In H3a, we will use the emmeans package to calculate marginal means for each condition and produce a single parameter by integrating across the 14-day period\nMultilevel model: We will fit the MLM as defined in Table 1 above, as the second-highest performing model in the simulations (having higher power for linear effects, but lower for non-linear)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generate Synthetic Data</span>"
    ]
  }
]