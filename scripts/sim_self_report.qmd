---
title: "Generate Synthetic Data"
output: html_document
execute-dir: project
---

## Introduction

This document demonstrates a complete workflow for generating synthetic data, introducing dropout, and fitting models (a GAM or MLM) to the data. The main focus is on the `sim_study` function, which orchestrates the data simulation, dropout process, and model fitting. The code is presented in separate chunks, each serving a specific purpose, with explanatory text interspersed.

First we load packages with `pacman`, which is fully compatible with `renv`.
```{r}
#| label: load-libraries

library(pacman)

p_load(tidyverse, qualtRics, lme4, mgcv, marginaleffects, broom, forestplot)

```

### Simulation, Dropout, and Fitting Functions

Here we define:

- `sim_data`: Generates synthetic data with random intercepts/slopes and AR(1) errors.
- `sim_dropout`: Introduces missingness and dropout in the dataset.
- `fit_gam`: Fits a GAM with an AR(1) correlation structure.
- `fit_mlm`: Fits a multi-level linear model (random intercept per subject).
- `sim_study`: Ties everything togetherâ€”generates data, applies dropout, then fits the chosen model and returns a tidy summary.

```{r}
#| label: sim-functions

#' Generate Synthetic Data
#'
#' This function simulates synthetic panel data for `n` participants over `n_days` time points,
#' with an intervention effect, random intercepts and slopes, and AR(1)-correlated residuals.
#'
#' @param n Number of participants. Default is 1000.
#' @param n_days Number of time points per participant. Default is 28.
#' @param b Fixed effect for the intervention slope. Default is 0.01.
#' @param phi AR(1) autocorrelation coefficient. Default is 0.7.
#' @param sigma AR(1) residual standard deviation. Default is 0.6.
sim_data <- function(n = 1000,
                     n_days = 28,
                     b = 0.01,
                     
                     # AR(1) parameters
                     phi = 0.7,     # Autocorrelation coefficient
                     sigma = .6)     # Residual SD
{
  dat <- tibble(
    id = 1:n,
    age = sample(18:36, n, replace = TRUE),
    gender = sample(c("man","woman","non-binary"), n, prob = c(.45, .45, .1), replace = TRUE),
    condition = factor(sample(c("control", "intervention"), n, replace = TRUE)),
    experimental_condition = ifelse(condition == "intervention", 1, 0),
    intercept = rnorm(n, 0, .5),
    slope = rnorm(n, 0, .02)
  ) |> 
    # expand to 28 waves per id
    crossing(
      day = 1:n_days
    ) |> 
    mutate(
      intervention_period = (day > 7 & day < 22)
    ) |> 
    group_by(id) |> 
    mutate(
      # Generate AR(1) errors for each participant
      e = as.numeric(arima.sim(n = n_days, 
                               model = list(ar = phi), 
                               sd = sigma)),
      # Add random effect + fixed effect + AR(1) error
      wellbeing = 
        intercept + 
        ((b + slope) * (day - 7)) * experimental_condition * intervention_period + 
        .01*age +
        -.05*gender %in% c("women","non-binary") +
        e
    ) |> 
    ungroup()

}


#' Simulate Dropout
#'
#' Introduces missingness and dropout into a dataset by randomly assigning records as missing
#' or dropped out. Once a participant is dropped out, all subsequent records become missing.
#'
#' @param dat A tibble generated by \code{sim_data()}.
#'
#' @return A tibble of the same structure as \code{dat}, but with some \code{wellbeing} values set to NA.
#'
sim_dropout <- function(dat) {
  
  dropout <- dat |> 
    mutate(
      missing = sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(.10, .90)),
      dropout = sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(.01, .99))
    ) |>
    mutate(
      missing = ifelse(cumsum(dropout) > 0, TRUE, missing),
      .by = id
    ) |>
    arrange(as.integer(id), day) |> 
    mutate(wellbeing = ifelse(missing, NA, wellbeing))
  dropout
}

#' Fit a Generalized Additive Model (GAM)
#'
#' Fits a GAM model to the provided dataset using \code{mgcv::gam}, including an AR(1)
#' correlation structure and random intercept for each ID.
#'
#' @param dat A tibble of repeated-measures data (e.g., from \code{sim_data()} and \code{sim_dropout()}).
#'
#' @return An object of class \code{gam}, which is the fitted GAM model.
#'
fit_gam <- function(dat) {
  
  gam(wellbeing ~ condition:intervention_period + 
        s(day, by = condition) +
        s(id, bs = "re"),
      data = dat,
      # method = "REML",
      correlation = corAR1(form = ~ day | id))
}

#' Fit a Multi-Level Model (MLM)
#'
#' Fits a linear mixed-effects model (LME) with random intercept for each ID using \code{lme4::lmer}.
#'
#' @param dat A tibble of repeated-measures data (e.g., from \code{sim_data()} and \code{sim_dropout()}).
#'
#' @return An object of class \code{lmerMod}, which is the fitted MLM model.
#'
fit_mlm <- function(dat) {
  lmer(wellbeing ~ condition*intervention_period + (1|id), data = dat)
}

#' Simulation Study Orchestrator
#'
#' A higher-level function that ties together data simulation, dropout, and model fitting,
#' returning a tidy summary of the fitted model parameters.
#'
#' @param model_function A function to fit the model. Defaults to \code{fit_gam}.
#' @param n Number of participants passed to \code{sim_data()}. Default is 1000.
#' @param n_days Number of time points per participant passed to \code{sim_data()}. Default is 28.
#' @param b Fixed effect for the intervention slope passed to \code{sim_data()}. Default is 0.01.
#' @param phi AR(1) autocorrelation coefficient passed to \code{sim_data()}. Default is 0.7.
#' @param sigma AR(1) residual standard deviation passed to \code{sim_data()}. Default is 0.6.
#'
#' @return A data frame (tibble) of model estimates from \code{broom::tidy(parametric = TRUE)}.
#'
sim_study <- function(model_function = fit_gam,
                      n = 1000,
                      n_days = 28,
                      b = 0.01,
                      
                      # AR(1) parameters
                      phi = 0.7,     # Autocorrelation coefficient
                      sigma = .6) {
  dat <- sim_data() |> 
    sim_dropout()
  model_function(dat) |> 
    broom::tidy(parametric = TRUE)
}

```


### Test Data Creation & Descriptively Plot
Below, we create a sample dataset using sim_data() and examine it with basic plots. The first is a smoothed trend over days for each condition; the second is a line plot of average wellbeing per day, grouped by condition.

```{r}
#| label: test-plot-descriptive

dat <- sim_data()

# loess
ggplot(dat, aes(y = wellbeing, x = day, color = condition)) +
  geom_smooth() + 
  theme_minimal()

# line plot
dat |> 
  group_by(condition, day) |> 
  summarise(wellbeing = mean(wellbeing)) |> 
  ggplot(aes(y = wellbeing, x = day, color = condition)) +
  geom_line() + 
  theme_minimal()

```

### Test Fitting a Model

We fit our GAM (`fit_gam`) to the newly simulated data, then demonstrate a simple way to visualize model predictions using `plot_predictions` from the marginaleffects package.

```{r}
#| label: test-fit

fit <- fit_gam(dat)

# modify this to plot over days
plot_predictions(fit, condition = c("day", "condition"))
```

# Power analysis: Repeated Simulation Studies

To assess power/sensitivity, we run multiple simulations (controlled by `n_sims`) and gather the parameter estimates for a particular term (here, "conditionintervention:intervention_periodTRUE"). Each iteration calls `sim_study`, which does the data generation, dropout, and fitting.

```{r}
#| label: sim-studies

n_sims <- 100

results <- map_dfr(
  1:n_sims, 
  ~ sim_study(model_function = fit_gam,
              n = 1000,
              n_days = 28,
              b = 0.01,
              phi = 0.7,
              sigma = .6),
  .progress = TRUE
  ) |> 
  filter(term == "conditionintervention:intervention_periodTRUE") |> 
  mutate(
    conf.low = estimate - 1.96 * std.error,
    conf.high = estimate + 1.96 * std.error
  )

results |>
  forestplot(mean = estimate,
             lower = conf.low,
             upper = conf.high,
             labeltext = term)

```

